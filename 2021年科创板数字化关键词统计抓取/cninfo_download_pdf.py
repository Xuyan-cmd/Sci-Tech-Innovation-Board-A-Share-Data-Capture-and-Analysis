import json
import os
import re
import datetime
from time import sleep
from urllib import parse
import requests


def get_adress(bank_name):
    url = "http://www.cninfo.com.cn/new/information/topSearch/detailOfQuery"
    data = {
        'keyWord': bank_name,
        'maxSecNum': 10,
        'maxListNum': 5,
    }
    hd = {
        'Host': 'www.cninfo.com.cn',
        'Origin': 'http://www.cninfo.com.cn',
        'Pragma': 'no-cache',
        'Accept-Encoding': 'gzip,deflate',
        'Connection': 'keep-alive',
        'Content-Length': '70',
        'User-Agent': 'Mozilla/5.0(Windows NT 10.0;Win64;x64) AppleWebKit / 537.36(KHTML, likeGecko) Chrome / 75.0.3770.100Safari / 537.36',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Accept': 'application/json,text/plain,*/*',
        'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
    }
    try:
        r = requests.post(url, headers=hd, data=data)
        # print(r.text)
        r = r.content
        m = str(r, encoding="utf-8")
        pk = json.loads(m)
        orgId = pk["keyBoardList"][0]["orgId"]  # 获取参数
        plate = pk["keyBoardList"][0]["plate"]
        code = pk["keyBoardList"][0]["code"]
    except:
        print('----------wait 10----------get_adress')
        sleep(10)
        print('----------restart----------get_adress')
        return get_adress(bank_name)

    # print(orgId, plate, code)
    return orgId, plate, code


def download_PDF(url, file_name):  # 下载pdf
    url = url
    try:
        r = requests.get(url)
    except:
        print('----------wait 10----------download_PDF')
        sleep(10)
        print('----------restart----------download_PDF')
        return download_PDF(url, file_name)
    f = open(bank + "/" + file_name + ".pdf", "wb")
    f.write(r.content)


def get_PDF(orgId, plate, code):
    url = "http://www.cninfo.com.cn/new/hisAnnouncement/query"
    data = {
        'stock': '{},{}'.format(code, orgId),
        'tabName': 'fulltext',
        'pageSize': 30,
        'pageNum': 1,
        'column': plate,
        'category': 'category_ndbg_szsh;',
        'plate': '',
        'seDate': '',
        'searchkey': '',
        'secid': '',
        'sortName': '',
        'sortType': '',
        'isHLtitle': 'true',
    }

    hd = {
        'Host': 'www.cninfo.com.cn',
        'Origin': 'http://www.cninfo.com.cn',
        'Pragma': 'no-cache',
        'Accept-Encoding': 'gzip,deflate',
        'Connection': 'keep-alive',
        # 'Content-Length': '216',
        'User-Agent': 'User-Agent:Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Accept': 'application/json,text/plain,*/*',
        'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
        'X-Requested-With': 'XMLHttpRequest',
        # 'Cookie': cookies
    }
    data = parse.urlencode(data)
    # print(data)
    try:
        r = requests.post(url, headers=hd, data=data)
        # print(r.text)
        r = str(r.content, encoding="utf-8")
        r = json.loads(r)
    except:
        print('----------wait 10----------get_PDF')
        sleep(10)
        print('----------restart----------get_PDF')
        return get_PDF(orgId, plate, code)

    reports_list = r['announcements']
    if reports_list is None:
        return
    for report in reports_list:
        if '摘要' in report['announcementTitle'] or "20" not in report['announcementTitle']:
            continue

        if 'H' in report['announcementTitle']:
            continue
        if '英文' in report['announcementTitle']:
            continue

        year = re.findall('\d{4}', report['announcementTitle'])[0]
        if year not in ['2021']:
            continue
        # http://static.cninfo.com.cn/finalpage/2021-03-29/1205958883.PDF
        pdf_url = "http://static.cninfo.com.cn/" + report['adjunctUrl']
        file_name = report['announcementTitle'].replace('*', '')
        print("正在下载："+pdf_url, "存放在当前目录：/"+bank+"/"+file_name)
        download_PDF(pdf_url, file_name)
        # sleep(0.1)
    print(datetime.datetime.now())


if __name__ == '__main__':
    bank_list = ['688001', '688002', '688003', '688004', '688005', '688006', '688007', '688008', '688009', '688010', '688011', '688012', '688013', '688015', '688016', '688017', '688018', '688019', '688020', '688021', '688022', '688023', '688025', '688026', '688027', '688028', '688029', '688030', '688031', '688032', '688033', '688035', '688036', '688037', '688038', '688039', '688041', '688045', '688046', '688047', '688048', '688049', '688050', '688051', '688052', '688053', '688055', '688056', '688057', '688058', '688059', '688060', '688061', '688062', '688063', '688065', '688066', '688067', '688068', '688069', '688070', '688071', '688072', '688073', '688075', '688076', '688077', '688078', '688079', '688080', '688081', '688082', '688083', '688085', '688086', '688087', '688088', '688089', '688090', '688091', '688092', '688093', '688095', '688096', '688097', '688098', '688099', '688100', '688101', '688102', '688103', '688105', '688106', '688107', '688108', '688109', '688110', '688111', '688112', '688113', '688114', '688115', '688116', '688117', '688118', '688119', '688120', '688121', '688122', '688123', '688125', '688126', '688127', '688128', '688129', '688130', '688131', '688132', '688133', '688135', '688136', '688137', '688138', '688139', '688148', '688150', '688151', '688152', '688153', '688155', '688156', '688157', '688158', '688159', '688160', '688161', '688162', '688163', '688165', '688166', '688167', '688168', '688169', '688170', '688171', '688173', '688175', '688176', '688177', '688178', '688179', '688180', '688181', '688182', '688183', '688184', '688185', '688186', '688187', '688188', '688189', '688190', '688191', '688192', '688193', '688195', '688196', '688197', '688198', '688199', '688200', '688201', '688202', '688203', '688205', '688206', '688207', '688208', '688209', '688210', '688211', '688212', '688213', '688215', '688216', '688217', '688218', '688219', '688220', '688221', '688222', '688223', '688225', '688226', '688227', '688228', '688229', '688230', '688231', '688232', '688233', '688234', '688235', '688236', '688237', '688238', '688239', '688244', '688246', '688247', '688248', '688251', '688252', '688253', '688255', '688256', '688257', '688258', '688259', '688260', '688261', '688262', '688265', '688266', '688267', '688268', '688269', '688270', '688271', '688272', '688273', '688275', '688276', '688277', '688278', '688279', '688280', '688281', '688282', '688283', '688285', '688286',
                 '688287', '688288', '688289', '688290', '688291', '688292', '688293', '688295', '688296', '688297', '688298', '688299', '688300', '688301', '688302', '688303', '688305', '688306', '688308', '688309', '688310', '688311', '688312', '688313', '688314', '688315', '688316', '688317', '688318', '688319', '688320', '688321', '688322', '688323', '688325', '688326', '688327', '688328', '688329', '688330', '688331', '688332', '688333', '688335', '688336', '688337', '688338', '688339', '688345', '688348', '688349', '688350', '688351', '688353', '688355', '688356', '688357', '688358', '688359', '688360', '688363', '688365', '688366', '688367', '688368', '688369', '688370', '688371', '688372', '688373', '688375', '688377', '688378', '688379', '688380', '688381', '688382', '688383', '688385', '688386', '688387', '688388', '688389', '688390', '688391', '688392', '688393', '688395', '688396', '688398', '688399', '688400', '688401', '688403', '688408', '688409', '688416', '688418', '688419', '688425', '688426', '688428', '688439', '688448', '688455', '688456', '688459', '688466', '688468', '688488', '688499', '688500', '688501', '688505', '688508', '688509', '688510', '688511', '688513', '688516', '688517', '688518', '688519', '688520', '688521', '688526', '688528', '688529', '688533', '688536', '688538', '688550', '688551', '688553', '688555', '688556', '688557', '688558', '688559', '688560', '688561', '688565', '688566', '688567', '688568', '688569', '688571', '688575', '688577', '688578', '688579', '688580', '688585', '688586', '688588', '688589', '688590', '688595', '688596', '688597', '688598', '688599', '688600', '688601', '688606', '688607', '688608', '688609', '688611', '688613', '688616', '688617', '688618', '688619', '688621', '688622', '688625', '688626', '688628', '688630', '688633', '688636', '688639', '688655', '688656', '688658', '688659', '688660', '688661', '688662', '688663', '688665', '688667', '688668', '688669', '688670', '688676', '688677', '688678', '688679', '688680', '688681', '688682', '688683', '688685', '688686', '688687', '688689', '688690', '688696', '688697', '688698', '688699', '688700', '688701', '688707', '688711', '688718', '688722', '688728', '688733', '688737', '688739', '688766', '688767', '688768', '688772', '688776', '688777', '688778', '688779', '688786', '688787', '688788', '688789', '688793', '688798', '688799', '688800', '688819', '688981', '689009', ]
    for bank in bank_list:
        try:
            os.mkdir(bank)
        except:
            continue
        orgId, plate, code = get_adress(bank)
        get_PDF(orgId, plate, code)
        print("下一家~")
    print("All done!")
